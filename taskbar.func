#!/bin/zsh
info.node.keys ()
{
    info.node $@
    print ${(k)info}
}

info.node ()
{
    if [[ ! $@ =~ '[[:digit:]]' ]]; then
        base=`bspc query -n "${${(s: :)$(grep -E "$@" /tmp/taskbar)}[2]}" -T |sed 's/{\|}\|"//g;s/,y/ y/g;s/,/\n/g;s/constraints:\|client://g;s/x://g;s/ y:/x/g'`        
    else
        base=`bspc query -n "${${(s: :)$(sed -n $@'p' /tmp/taskbar)}[2]}" -T |sed 's/{\|}\|"//g;s/,y/ y/g;s/,/\n/g;s/constraints:\|client://g;s/x://g;s/ y:/x/g'`
    fi
    
    typeset -Ag info
    for i in ${(f)base}
        info[${${(s#:#)i}[1]}]=${${(s#:#)i}[2]}
}

foco ()
{
    info.node $1
    bd=/tmp/taskbar
	if [[ $twm == "bspwm" ]]; then
	    if [[ "$info[hidden]" == "false"  ]]; then
	        if [[ $info[id] == $(conversorHxD $(< /tmp/taskbar_id_focused)) ]]; then
	            bspc node $info[id] --flag hidden=on
	        else
	            bspc node $info[id] -f
	        fi
	    else
	        bspc node $info[id] --flag hidden=off
	        bspc node $info[id] -f
	    fi
	elif [[ $twm == "LG3D" ]]; then	
		local idh="$(awk -v linha=$1 'NR == linha {print $2}' $bd)"
	    local  forward_for=$(awk -v linha=$1 'NR == linha {print $1}' $bd)	    
	    local  id_focused=$(< /tmp/taskbar_id_focused)	    
	    local  actual=${${(s: :)$(grep $id_focused < /tmp/taskbar)}[1]}	    		
		local  idd="$(conversorHxD $idh)"		
		local  minimized=${${(s: :)$(qtile-cmd -o window "$idd" -f info |grep 'minimized')//\,/}[2]}		
		[[ "$forward_for" != "$actual" && -n "$forward_for" ]] &&
		    {
		        qtile-cmd -o screen -f togglegroup --args "$forward_for"
		        qlayout bar
            }
            
		[[ "$minimized" == "True" ]] && 
		    { 
		        qtile-cmd -o window "$idd" -f toggle_maximize
		        qtile-cmd -o window $idd -f focus
            }
		qtile-cmd -o window $idd -f focus
	fi
}

close ()
{
	if [[ $twm == "bspwm" ]]; then
		wmctrl -i -c \
		"$(awk -v linha=$1 'NR == linha {print $2}' $bd)"
	elif [[ $twm == "LG3D" ]]; then
		idh="$(awk -v linha=$1 'NR == linha {print $2}' $bd)"
		idd="$(conversorHxD $idh)"
		qtile-cmd -o window $idd -f kill
	fi
}

fullscreen ()
{
	if [[ $twm == "bspwm" ]]; then
		wmctrl -i -r \
		"$(awk -v linha=$1 'NR == linha {print $2}' $bd)" \
		-b toggle,fullscreen
	elif [[ $twm == "LG3D" ]]; then
		idh="$(awk -v linha=$1 'NR == linha {print $2}' $bd)"
		idd="$(conversorHxD $idh)"
		qtile-cmd -o window $idd -f toggle_fullscreen
	fi	
}

tiled ()
{
	if [[ $twm == "bspwm" ]]; then
		bspc node \
		$(awk -v linha=$1 'NR == linha {print $2}' $bd) \
		-t tiled
	elif [[ $twm == "LG3D" ]]; then
		idh="$(awk -v linha=$1 'NR == linha {print $2}' $bd)"
		idd="$(conversorHxD $idh)"
		qtile-cmd -o window $idd -f toggle_minimize
	fi		
}

floating ()
{
	if [[ $twm == "bspwm" ]]; then
		bspc node \
		$(awk -v linha=$1 'NR == linha {print $2}' $bd) \
		-t floating
	elif [[ $twm == "LG3D" ]]; then
		idh="$(awk -v linha=$1 'NR == linha {print $2}' $bd)"
		idd="$(conversorHxD $idh)"
		qtile-cmd -o window $idd -f toggle_floating
	fi	
}

# i3wm
i3floating ()
{
	i3-msg \
	'[id='$(sed -n $1'p' $bd |awk {'print $2'})']' \
	floating toggle
}

# WS Workspaces

labelws ()
{
	</tmp/taskbar.workspace
}


blabel ()
{
	if [[ $(wc -l <<< "$base") -gt 1 ]]; then
		program=${${(s: :)${(f)${base}}[$1]}[5]}
		iconProgram=${${(s: :)${(f)${base}}[$1]}[4]}
		iconWorkspace=${${(s: :)${(f)${base}}[$1]}[3]}
		label=$(tail -c $sizeLabel <<< ${${(s: :)${(f)${base}}[$1]}[6,-1]})
	else
		program=${${(s: :)base}[5]}
		iconProgram=${${(s: :)base}[4]}
		iconWorkspace=${${(s: :)base}[3]}
		label=$(tail -c $sizeLabel <<< ${${(s: :)base}[6,-1]})
	fi
}

labelmin ()
{
    blabel $@
    if [[ -n $colorsIcons[$program] ]];then
    	printf '%4s' "%{B$colorBackgroundUnFocused}%{F${colorsIcons[$program]}}%{T$fontProgram} $iconProgram %{F$colorIconWorkspaceUnFocused}%{T$fontWorkspace}$iconWorkspace %{F- B-}"
    else
    	printf '%4s' "%{B$colorBackgroundUnFocused}%{F$colorIconProgramUnFocused}%{T$fontProgram} $iconProgram %{F$colorIconWorkspaceUnFocused}%{T$fontWorkspace}$iconWorkspace %{F- B-}"
    fi
    
}

labelmin.bkp ()
{
    blabel $@
	printf '%4s' "\
	%{B$colorBackgroundUnFocused}%{F$colorIconProgramUnFocused}%{T$fontProgram} $iconProgram \
	%{F$colorIconWorkspaceUnFocused}%{T$fontWorkspace}$iconWorkspace %{F- B-} \
	"    
}

label ()
{
	blabel $@
	if [[ -n $colorsIcons[$program] ]];then
		labelSize=$(($sizeLabel+16))
		printf '%-30s %-'$labelSize's %16s' \
		"%{B$colorBackgroundUnFocused}%{F${colorsIcons[$program]}}%{T$fontProgram} $iconProgram" \
		"%{F$colorForegroundUnFocused}%{T$fontLabelUnFocused}$label" \
		"%{F$colorIconWorkspaceUnFocused}%{T$fontWorkspace}$iconWorkspace %{F- B-}"
	else
		labelSize=$(($sizeLabel+16))
		printf '%-30s %-'$labelSize's %16s' \
		"%{B$colorBackgroundUnFocused}%{F$colorIconProgramUnFocused}%{T$fontProgram} $iconProgram" \
		"%{F$colorForegroundUnFocused}%{T$fontLabelUnFocused}$label" \
		"%{F$colorIconWorkspaceUnFocused}%{T$fontWorkspace}$iconWorkspace %{F- B-}"
	fi
}


labelfocused ()
{
	blabel $@
	if [[ -n $colorsIcons[$program] ]];then
		labelSize=$(($sizeLabel+16))
		printf '%-30s %-'$labelSize's %16s' \
		"%{B$colorBackgroundFocused}%{F${colorsIcons[$program]}}%{T$fontProgram} $iconProgram" \
		"%{F$colorForegroundFocused}%{T$fontLabelFocused}$label" \
		"%{F$colorIconWorkspaceFocused}%{T$fontWorkspace}$iconWorkspace %{F- B-}"
	else
		labelSize=$(($sizeLabel+16))
		printf '%-30s %-'$labelSize's %16s' \
		"%{B$colorBackgroundFocused}%{F$colorIconProgramFocused}%{T$fontProgram} $iconProgram" \
		"%{F$colorForegroundFocused}%{T$fontLabelFocused}$label" \
		"%{F$colorIconWorkspaceFocused}%{T$fontWorkspace}$iconWorkspace %{F- B-}"
	fi
}

base=$(< $bd)